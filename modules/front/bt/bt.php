<?php

/**
 * @brief       Bt Class
 * @author      -storm_author-
 * @copyright   -storm_copyright-
 * @package     IPS Social Suite
 * @subpackage  Dev Toolbox
 * @since       4.0.0
 * @version     -storm_version-
 */

namespace IPS\toolbox\modules\front\bt;

use IPS\toolbox\Code\Utils\Todo;
use Phar;
use IPS\Db;
use IPS\Log;
use http\Url;
use IPS\File;
use Exception;
use IPS\Theme;
use Throwable;
use IPS\Member;
use IPS\Output;
use IPS\Plugin;
use IPS\Request;
use IPS\DateTime;
use IPS\Data\Store;
use NumberFormatter;
use ReflectionClass;
use IPS\Output\Cache;
use IPS\toolbox\Form;
use IPS\calendar\Date;
use IPS\toolbox\Editor;
use IPS\toolbox\Slasher;
use IPS\toolbox\Profiler;
use IPS\toolbox\Application;
use IPS\toolbox\Shared\Uuid;
use InvalidArgumentException;
use IPS\toolbox\Shared\Lorem;
use UnexpectedValueException;
use IPS\Dispatcher\Controller;
use IPS\toolbox\Build\Versions;
use IPS\toolbox\Profiler\Debug;
use IPS\toolbox\Proxy\Proxyclass;
use Intervention\Image\ImageManager;
use IPS\Application\BuilderIterator;

use IPS\toolbox\Proxy\Generator\Proxy;
use Symfony\Component\Filesystem\Filesystem;

use function _p;
use function md5;
use function pow;
use function time;
use function trim;
use function count;
use function nl2br;
use function sleep;
use function header;
use function is_dir;
use function uniqid;
use function defined;
use function explode;
use function implode;
use function ini_get;
use function mt_rand;
use function phpinfo;
use function is_array;
use function ob_start;
use function pathinfo;
use function array_pop;
use function microtime;
use function preg_match;
use function file_exists;
use function json_decode;
use function str_replace;
use function htmlentities;
use function ob_end_clean;
use function ob_get_clean;
use function preg_replace;
use function str_contains;
use function base64_decode;

use function mb_strtolower;
use function mb_strtoupper;
use function extension_loaded;
use function file_get_contents;
use function preg_replace_callback;

use const DT_MY_APPS;
use const DT_SLASHER;
use const IPS\NO_WRITES;
use const IPS\IPS_FOLDER_PERMISSION;

if (!defined('\IPS\SUITE_UNIQUE_KEY')) {
    header(($_SERVER['SERVER_PROTOCOL'] ?? 'HTTP/1.0') . ' 403 Forbidden');
    exit;
}

/**
 * bt
 */
class _bt extends Controller
{
    public function execute()
    {
        Application::loadAutoLoader();
        parent::execute(); // TODO: Change the autogenerated stub
    }

    public function dates()
    {
        $time = Request::i()->time ?? Date::create()->getTimestamp();
        $type = Request::i()->type ?? 'unix';
        $dates = Profiler\Dates::i()->{$type}($time);
        if (isset(Request::i()->time)) {
            Output::i()->json($dates);
        } else {
            Output::i()->output = Theme::i()->getTemplate('toybox', 'toolbox', 'front')->dates($dates);
        }
    }

    /**
     * @inheritdoc
     */
    protected function manage(): void
    {
        $store = Store::i()->dtprofiler_bt;
        $hash = Request::i()->bt;
        $output = 'Nothing Found';
        if (isset($store[$hash])) {
            $bt = str_replace("\\\\", "\\", $store[$hash]['bt']);
            $output = '<code>' . $store[$hash]['query'] . '</code><br><pre class="prettyprint lang-php">' . $bt . '</pre>';
        }

        Output::i()->output = "<div class='ipsPad'>{$output}</div>";
    }

    /**
     * shows data for the cache dialog
     */
    protected function cache(): void
    {
        $store = Store::i()->dtprofiler_bt_cache;
        $hash = Request::i()->bt;
        $output = 'Nothing Found';
        if (isset($store[$hash])) {
            $bt = str_replace("\\\\", "\\", $store[$hash]['bt']);
            $content = nl2br(htmlentities($store[$hash]['content']));
            $output = '<code>' . $content . '</code><br><pre class="prettyprint lang-php">' . $bt . '</pre>';
        }

        Output::i()->output = "<div class='ipsPad'>{$output}</div>";
    }

    /**
     * @throws Db\Exception
     * @throws UnexpectedValueException
     */
    protected function debug(): void
    {
        $max = (ini_get('max_execution_time') / 2) - 5;
        $time = time();
        $since = Request::i()->last ?: 0;
        while (true) {
            $ct = time() - $time;
            if ($ct >= $max) {
                Output::i()->json(['error' => 1]);
            }

            $config = [
                'where' => [
                    'debug_id > ? AND debug_viewed = ?',
                    $since,
                    0,
                ]
            ];
            $debug = Debug::all($config, true);
            if ($debug !== 0) {
                $debug = Debug::all($config);
                $last = 0;
                $list = [];
                /* @var Debug $obj */
                foreach ($debug as $obj) {
                    $list[] = $obj->body();
                    $last = $obj->id;
                }

                $return = [];
                if (empty($list) !== true) {
                    $count = count($list);
                    $return['count'] = $count;
                    $lists = '';
                    foreach ($list as $l) {
                        $lists .= Theme::i()->getTemplate('generic', 'toolbox', 'front')->li($l);
                    }
                    $return['last'] = $last;
                    $return['items'] = $lists;
                }

                if (is_array($return) && count($return)) {
                    Output::i()->json($return);
                }
            } else {
                sleep(1);
                continue;
            }
        }
    }

    protected function phpinfo(): void
    {
        ob_start();
        phpinfo();
        $content = ob_get_clean();
        try {
            ob_end_clean();
        } catch (Exception $e) {
        }
        $content = preg_replace('#<head>(?:.|\n|\r)+?</head>#miu', '', $content);
        Output::i()->title = 'phpinfo()';
        Output::i()->output = Theme::i()->getTemplate('bt', 'toolbox', 'front')->phpinfo($content);
    }

    protected function clearCaches(): void
    {
        $redirect = base64_decode(Request::i()->data, true);
        $this->_clearCache();
        Output::i()->redirect($redirect);
    }

    protected function _clearCache()
    {
        $path = \IPS\Application::getRootPath() . '/hook_temp';

        if (is_dir($path)) {
            Application::loadAutoLoader();
            $fs = new Filesystem();
            $fs->remove([$path]);
        }
            /* Clear JS Maps first */
            Output::clearJsFiles();

            /* Reset theme maps to make sure bad data hasn't been cached by visits mid-setup */
            Theme::deleteCompiledCss();
            Theme::deleteCompiledResources();

            foreach (Theme::themes() as $id => $set) {
                /* Invalidate template disk cache */
                $set->cache_key = md5(microtime() . mt_rand(0, 1000));
                $set->save();
            }

        Store::i()->clearAll();
        \IPS\Data\Cache::i()->clearAll();
        Cache::i()->clearAll();
        Member::clearCreateMenu();
        Proxyclass::i()->emptyDirecties();
    }

    protected function thirdParty(): void
    {
        $enable = (int) Request::i()->enabled;
        $redirect = base64_decode(Request::i()->data, true);
        $apps = Profiler::i()->apps();
        $plugins = Profiler::i()->plugins();

        /* Loop Apps */
        foreach ($apps as $app) {
            Db::i()->update('core_applications', ['app_enabled' => $enable], ['app_id=?', $app->id]);
        }

        /* Look Plugins */
        foreach ($plugins as $plugin) {
            Db::i()->update('core_plugins', ['plugin_enabled' => $enable], ['plugin_id=?', $plugin->id]);
        }

        if (!empty($apps)) {
            Application::postToggleEnable();
        }

        if (!empty($plugins)) {
            Plugin::postToggleEnable(true);
        }

        /* Clear cache */
        Cache::i()->clearAll();
        Plugin\Hook::writeDataFile();
        Output::i()->redirect($redirect);
    }

    protected function enableDisableApp(): void
    {
        $enabled = (int) Request::i()->enabled;
        if ($enabled === 1) {
            $enabled = 0;
        } else {
            $enabled = 1;
        }
        $redirect = base64_decode(Request::i()->data, true);
        $id = (int) Request::i()->id;
        $data = Db::i()->select('*', 'core_applications', ['app_id=?', $id])->first();
        /** @var Application $app */
        $app = \IPS\Application::constructFromData($data);
        $app->enabled = $enabled;
        $app->save();
//        Db::i()->update('core_applications', ['app_enabled' => $enabled], ['app_id=?', $id]);
        Application::postToggleEnable();
        $this->_clearCache();

        Output::i()->redirect($redirect);
    }

    protected function enableDisablePlugin(): void
    {
        $enabled = !Request::i()->enabled;
        $redirect = base64_decode(Request::i()->data, true);
        $id = Request::i()->id;
        Db::i()->update('core_plugins', ['plugin_enabled' => $enabled], ['plugin_id=?', $id]);
        Application::postToggleEnable();
        Cache::i()->clearAll();
        Output::i()->redirect($redirect);
    }

    protected function gitInfo(): void
    {
        $info = [];
        Profiler::i()->getLastCommitId($info);
        Profiler::i()->hasChanges($info);
        $html = '';
        if (!empty($info)) {
            $html = Theme::i()->getTemplate('bar', 'toolbox', 'front')->git($info);
        }

        Output::i()->json(['html' => $html]);
    }

    protected function gitCheckout()
    {
    }

    protected function lorem(): void
    {
        $form = Form::create()->setPrefix('toolbox_lorem_')->submitLang(null)->setAttributes(
            ['data-ipstoolboxtoyboxlorem' => 1]
        );

        $form->addElement('amount', 'number')->value(4)->options(['min' => 1]);
        $form->addElement('type', 'radio')
            ->value(3)
            ->options(
                [
                    'options' => [
                        1 => 'Words',
                        2 => 'Sentences',
                        3 => 'Paragraphs',
                    ],
                ]
            )->required();

        if ($values = $form->values()) {
            $return = '';
            $amount = $values['amount'];
            switch ($values['type']) {
                case 1:
                    $return = Lorem::i()->words($amount);
                    break;
                case 2:
                    $return = Lorem::i()->sentences($amount, ['p']);
                    break;
                case 3:
                    $return = Lorem::i()->paragraphs($amount, ['p']);
                    break;
            }

            Output::i()->json(['html' => $return, 'type' => 'toolboxClipBoard']);
        }
        $form->dialogForm();
        Output::i()->output = Theme::i()->getTemplate('toybox', 'toolbox', 'front')->lorem(
            $form,
            Lorem::i()->paragraphs(4, ['p'])
        );
    }

    protected function base()
    {
        Output::i()->output = Theme::i()->getTemplate('toybox', 'toolbox', 'front')->base();
    }

    protected function bitwiseValues()
    {
        $position = Request::i()->position ?? 15;
        $form = '';
        $bits = [];
        $fromFile = 1;
        $pos = 15;
        $path = Proxyclass::i()->save.'/bitwise.json';
        $class = [];
        if (file_exists($path)) {
            $class = json_decode(file_get_contents($path), true);
            if (Request::i()->class && isset($class[Request::i()->class])) {
                $cc = $class[Request::i()->class];
                $rf = new ReflectionClass($cc);
                if ($rf->hasProperty('bitOptions')) {
                    $prop = $rf->getProperty('bitOptions');
                    $prop->setAccessible(true);
                    $bitOptions = $prop->getValue();
                    $og = $bitOptions;
                    $first = array_shift($bitOptions);
                    $first = array_shift($first);
                    if (empty($first) === false) {
                        $fromFile = array_pop($first);
                        $position = floor(log($fromFile, 2)) + 2;
                    }
                }
            }
        }

//        $html .= '<div>1 => 1,</div>';
        for ($i = 1; $i <= $position; $i++) {
            $start = pow(2, $i - 1);
            if (($i - 1) % 15 === 0) {
                $bits[] = '</div><div class="ipsPos_left ipsMargin_right">';
            }
            $nn = $i;
            if(class_exists('NumberFormatter')) {
                $f = new \NumberFormatter("en", NumberFormatter::SPELLOUT);
                $nn = $f->format($i);
            }
            else{
                $nn = $this->convertNumberToWord($i);
            }
            $bits []= '<div>\'' . $nn . '\' => ' . $start . ',</div>';
        }

        Output::i()->output = Theme::i()->getTemplate('toybox', 'toolbox', 'front')->bitwise(
            $pos,
            $bits,
            $class
        );
    }

    public function convertNumberToWord($num = false)
    {
        $num = \str_replace(array(',', ' '), '' , \trim($num));
        if(! $num) {
            return false;
        }
        $num = (int) $num;
        $words = array();
        $list1 = array('', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven',
            'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'
        );
        $list2 = array('', 'ten', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety', 'hundred');
        $list3 = array('', 'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion', 'sextillion', 'septillion',
            'octillion', 'nonillion', 'decillion', 'undecillion', 'duodecillion', 'tredecillion', 'quattuordecillion',
            'quindecillion', 'sexdecillion', 'septendecillion', 'octodecillion', 'novemdecillion', 'vigintillion'
        );
        $num_length = \strlen($num);
        $levels = (int) (($num_length + 2) / 3);
        $max_length = $levels * 3;
        $num = \substr('00' . $num, -$max_length);
        $num_levels = \str_split($num, 3);
        for ($i = 0; $i < \count($num_levels); $i++) {
            $levels--;
            $hundreds = (int) ($num_levels[$i] / 100);
            $hundreds = ($hundreds ? ' ' . $list1[$hundreds] . ' hundred' . ' ' : '');
            $tens = (int) ($num_levels[$i] % 100);
            $singles = '';
            if ( $tens < 20 ) {
                $tens = ($tens ? ' ' . $list1[$tens] . ' ' : '' );
            } else {
                $tens = (int)($tens / 10);
                $tens = ' ' . $list2[$tens] . ' ';
                $singles = (int) ($num_levels[$i] % 10);
                $singles = ' ' . $list1[$singles] . ' ';
            }
            $words[] = $hundreds . $tens . $singles . ( ( $levels && ( int ) ( $num_levels[$i] ) ) ? ' ' . $list3[$levels] . ' ' : '' );
        } //end for loop
        $commas = \count($words);
        if ($commas > 1) {
            $commas = $commas - 1;
        }
        return \trim(\implode(' ', $words));
    }

    protected function hash()
    {
        $html = '';
        if (!Request::i()->hash) {
            $html .= '<div class="ipsPadding"><textarea>Hello World</textarea></div>';
        }
        $html .= '<div class="ipsPadding" id="elHashWindow">';
        $hash = Request::i()->hash ?? 'Hello World';
        $md5 = md5($hash);
        $sha1 = sha1($hash);
        $sha256 = hash('sha256', $hash);
        $sha512 = hash('sha512', $hash);
        Output::i()->output = Theme::i()->getTemplate('toybox', 'toolbox', 'front')->hash(
            $hash,
            $md5,
            $sha1,
            $sha256,
            $sha512
        );
    }

    protected function uuid()
    {
        $count = Request::i()->count ?? 3;
        $hyphens = Request::i()->hyphens ?? true;
        $lowercase = Request::i()->lowercase ?? false;
        $html = [];


        $form = Form::create()
                    ->setAttributes(['data-ipstoolboxtoyboxuuid' => null])
                    ->submitLang(null);
        $form->addElement('count', 'number')->value(3)->options(['min' => 1]);
        $form->addElement('hyphens', 'yn')->value(1);
        $form->addElement('lowercase', 'yn');
        if ($values = $form->values()) {
            $form = '';
            $count = (int) $values['count'];
            $hyphens = (bool) $values['hyphens'];
            $lowercase = (bool) $values['lowercase'];
        }

        for ($i = 1; $i <= $count; $i++) {
            $hash = Uuid::v4();
            if ($hyphens === false) {
                $hash = str_replace('-', '', $hash);
            }
            if ($lowercase === true) {
                $hash = mb_strtolower($hash);
            } else {
                $hash = mb_strtoupper($hash);
            }
            $html[] = $hash;
        }

        if ($form instanceof Form) {
            Output::i()->output = Theme::i()->getTemplate('toybox', 'toolbox', 'front')->uuid(
                $form,
                implode('<br>', $html)
            );
        } else {
            Output::i()->output = '<br>' . implode('<br>', $html);
        }
    }

    protected function html()
    {
        $encoded = $decoded = '<a href="#foo">link</a>';

        Output::i()->output = Theme::i()->getTemplate('toybox', 'toolbox', 'front')->html($decoded, $encoded);
    }

    protected function numbers()
    {
        $number = Request::i()->number ?? 3456;
        $type = Request::i()->type ?? 'decimal';
        try {
            $output = Profiler\Numbers::i()->{$type}($number);
        } catch (InvalidArgumentException $e) {
            $output = [
                $type => $number,
                'error' => $e->getMessage()
            ];
        }
        if (isset(Request::i()->type)) {
            Output::i()->json($output);
        } else {
            Output::i()->output = Theme::i()->getTemplate('toybox', 'toolbox', 'front')->numbers($output);
        }
    }

    protected function diffs()
    {
        Output::i()->output = Theme::i()->getTemplate('toybox', 'toolbox', 'front')->diffs();
    }

    protected function images()
    {
        $form = Form::create()->setPrefix('dtprofilerImagesConverter_')->submitLang(null);
        $options = [
            'storageExtension' => 'toolbox_FileStorage',
            'storageContainer' => 'toolboxConverter',
            'allowedFileTypes' => ['jpg', 'jpeg', 'png', 'gif', 'webp', 'heic'],
        ];
        $form->addElement('images', 'upload')->options($options)->required();
        $options = [
            'jpg' => 'jpg',
            'png' => 'png',
            'gif' => 'gif',
            'tif' => 'tif',
            'bmp' => 'bmp',
            'ico' => 'ico',
            'psd' => 'psd',
            'webp' => 'webp'
        ];
        ksort($options);
        $form->addElement('to', 'select')->options(['options' => $options])->value('png');

        if ($values = $form->values()) {
            Application::loadAutoLoader();
            $config = [
                'driver' => extension_loaded('imagick') ? 'imagick' : 'gd'
            ];
            $manager = new ImageManager($config);
            /** @var \IPS\File $file */
            $file = $values['images'];
            $img = (string) $manager->make($file->url)->encode($values['to']);

            $newFile = File::create(
                'toolbox_FileStorage',
                'imageConverted-' . $values['to'] . '-' . uniqid() . '.' . $values['to'],
                $img,
                'toolboxConverter',
                true
            );
            $file->delete();
            $newFile->save();
            Output::i()->json(['path' => (string) $newFile, 'url' => $newFile->url]);
        }

        $form->dialogForm();
        Output::i()->output = Theme::i()->getTemplate('toybox', 'toolbox', 'front')->images($form);
    }

    protected function download()
    {
        $path = Request::i()->path;
        $info = pathinfo($path);
        $file = File::get('toolbox_FileStorage', $path);
        $contents = $file->contents(true);
        $name = $file->originalFilename;
        $file->delete();
        Output::i()->sendOutput(
            $contents,
            200,
            'image/' . $info['extension'],
            [
                'Content-Disposition' => Output::getContentDisposition(
                    'attachment',
                    $name
                ),
            ]
        );
    }

    protected function clearAjax()
    {
        Db::i()->update('toolbox_debug', ['debug_viewed' => 1]);
    }

    protected function proxy()
    {
        try {
            if (NO_WRITES === true) {
                Output::i()->error(
                    'Proxy generator can not be used atm, NO_WRITES is enabled in the constants.php.',
                    '100foo'
                );
            }
//            $content = trim(file_get_contents('/home/michael/public_html/ips/dtProxy/templates/code.php'));
//            $funcNames = preg_match_all('#function (.*?)\(#msu', $content, $matching);
//            $v = array_values($matching[1]);
//            $m = array_combine($v, $v);
//             _p($v, $m);
            //Proxyclass::i()->buildMd5();
            Proxyclass::i()->dirIterator(null, false, false);
            Proxyclass::i()->buildHooks();
            $iterator = Store::i()->dtproxy_proxy_files;
            foreach ($iterator as $key => $file) {
                try {
                    Proxyclass::i()->build($file);
                }catch( \InvalidArgumentException $e){
                    continue;
                }
            }
            unset(Store::i()->dtproxy_proxy_files);
            Proxy::i()->buildConstants();
            $step = 1;
            do {
                $step = Proxyclass::i()->makeToolboxMeta($step);
            } while ($step !== null);
            Proxy::i()->generateSettings();
            Proxyclass::i()->buildCss();
            unset(Store::i()->dtproxy_proxy_files, Store::i()->dtproxy_templates);
            Output::i()->output = '';
        } catch (Throwable $e) {
            Debug::log($e);
            if (Request::i()->isAjax()) {
                Output::i()->json($e->getMessage() . '<br><code>' . $e->getTraceAsString() . '</code>', 500);
            } else {
                throw $e;
            }
        }
    }

    /**
     * shows data for the logs dialog
     */
    protected function log(): void
    {
        $id = Request::i()->id;
        $output = 'Nothing Found';
        try {
            $log = Log::load($id);
            $data = DateTime::ts($log->time);
            $name = 'Date: ' . $data;
            if ($log->category !== null) {
                $name .= '<br> Type: ' . $log->category;
            }

            if ($log->url !== null) {
                $name .= '<br> URL: ' . $log->url;
            }
            $body = $log->message;
            $msg = nl2br(htmlentities($body));
            if (str_contains($body, 'Stack trace:')) {
                $body = explode("\n", $body);
                $keep = [];
                $process = [];
                $replace = null;
                $i = 0;
                foreach ($body as $b) {
                    preg_match('#\#([0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9])\s(.*?):(.*?)\(#i', trim($b), $matches);
                    if (empty($matches) === true) {
                        $keep[$i] = $b.'<br>';
                    } else {
                        if ($replace === null) {
                            $replace = $i;
                            $keep[$i] = 1;
                        }
                        $process[] = $b;
                    }
                    $i++;
                }
                $newMsg = '';
                \IPS\toolbox\Profiler\Parsers\Logs::process($newMsg, $process, true);
                $keep[$replace] = $newMsg;
                $msg = '<h5>Log Message</h5>';
                $msg .= implode("\n", $keep);
            }
            $output = $name . '<br>' . $msg;

            if (\IPS\DEV_WHOOPS_EDITOR) {
                $output .= '<h5>Backtrace</h5>';
                $dbt = explode("\n", $log->backtrace);
                \IPS\toolbox\Profiler\Parsers\Logs::process($output, $dbt);
            } else {
                $output .= '<br><pre class="prettyprint lang-php">' . $log->backtrace . '</pre>';
            }
        } catch (Exception $e) {
            throw $e;
        }

        Output::i()->output = "<div class='ipsPadding dtProfilerLog'>{$output}</div>";
    }


//    protected function adminer()
//    {
//        $url = Url::baseUrl() . '/applications/toolbox/sources/Profiler/Adminer/db.php';
//        Output::i()->output = '<iframe id="toolboxAdminer"  width="100%" height="600px" src="' . $url . '"></iframe>';
//    }

    //    protected function checkout(){
    //        $app = Request::i()->dir;
    //        $branch = Request::i()->branch;
    //        $redirect = \base64_decode(Request::i()->data);
    //        $path = \IPS\Application::getRootPath().'/applications/'.$app.'/.git/';
    //        if( is_dir( $path ) && function_exists( 'exec' ) ){
    ////            try {
    //                $git = new GitRepository($path);
    //                $git->checkout( $branch );
    ////            } catch (GitException $e) {
    ////            }
    //        }
    //        Output::i()->redirect($redirect);
    //    }

    //    protected function commitPush()
    //    {
    //        $app = Request::i()->dir;
    //        $branch = Request::i()->branch;
    //        $redirect = \base64_decode(Request::i()->data);
    //        $gitReposPath = \IPS\Application::getRootPath() . '/git.php';
    //        $appRepos = [];
    //        if (file_exists($gitReposPath)) {
    //            require $gitReposPath;
    //            if( isset( $appRepos[$app] ) ){
    //            $path = \IPS\Application::getRootPath() . '/applications/' . $app . '/.git/';
    //            if (is_dir($path) && function_exists('exec')) {
    //                $e[] = [
    //                    'class' => 'textarea',
    //                    'name' => 'dtprofiler_commit_message'
    //                ];
    //
    //                $e[] = [
    //                    'class' => 'yn',
    //                    'name' => 'dtprofiler_push'
    //                ];
    //
    //                $forms = Forms::execute(['elements' => $e, 'submitLang' => 'dtprofiler_commit_button']);
    //
    //                if ($values = $forms->values()) {
    //                    $msg = $values[ 'dtprofiler_commit_message' ];
    //                    //                try {
    //                    $git = new GitRepository($path);
    //                    $git->execute( [
    //                        'config',
    //                        'user.name',
    //                        Member::loggedIn()->name
    //                    ]);
    //
    //                    $git->execute( [
    //                        'config',
    //                        'user.email',
    //                        Member::loggedIn()->email
    //                    ]);
    ////                    $git->addAllChanges();
    //                    $git->commit($msg, '-a');
    //                    //git config --get remote.origin.url
    //
    //                    if ($values[ 'dtprofiler_push' ]) {
    //                        foreach( $appRepos[$app] as $repo ) {
    //                            $git->push(null, ['--repo' => $repo]);
    //                        }
    //                    }
    //                    //                } catch (GitException $e) {
    //                    //                }
    //                    Output::i()->redirect($redirect);
    //
    //                }
    //            }
    //                Output::i()->output = $forms;
    //            }
    //        }
    //        else{
    //            Output::i()->redirect($redirect);
    //        }
    //    }

    public function todo(){
        //$sql = Db::i()->select('*', 'toolbox_todo',null, null, null, 'todo_app');
        $all = Todo::all();
        $todos = [];
        /** @var Todo $todo */
        foreach($all as $todo){
            $todos[$todo->app][] = $todo;
        }
        $output = '';
        foreach($todos as $app => $todo){

            $output .= Theme::i()->getTemplate('todo', 'toolbox', 'global')->results(
                $todo,
                $app,
                count($todos[$app])
            );
        }

        Output::i()->output = Theme::i()->getTemplate('todo', 'toolbox', 'global')->container(
            $output,
            'Todo\'s'
        );
    }
}
